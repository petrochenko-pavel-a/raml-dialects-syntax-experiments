#%RAML 1.0 Library
uses:
  lc: ./libs/langCore.raml
types:
  HasDescription:
    (lc.reusableProperty):
    properties:
      description?:
        type: string
        description: A substantial, human-friendly description of the API. Its value is a string and MAY be formatted using markdown.
  HasName:
    (lc.reusableProperty):
    properties:
      name: 
        type: string
        description: name of the thing
  HasBindings:
    (lc.reusableProperty):
    properties:
     bindings?:
      displayName: bindings
      description: Transport specific bindings for a model element
      type: Bindings
  HasPattern:
    (lc.reusableProperty):
    properties:
      pattern?:
        displayName: pattern
        description: Messaging pattern implemented by an end point
        type: string
  HasSchema:
    (lc.reusableProperty):
    properties:
      schema?:
        displayName: schema
        description: Data shape associated to some element of the domain
        type: lc.TypeDeclarationOrReference
  HasSerialization:
    (lc.reusableProperty):
    properties:
      serialization?:
        displayName: serialization
        description: Format used to encode some data over network transport
        type: string
  Async:
    type:  [lc.RootDomainElement, HasSerialization, HasBindings,HasDescription]
    description: |
      The top level element of any RAML Async is the AsyncAPI node. It introduces some meta-information about the API like the title, version and description of the API.
      It also holds the information of the Connection, global Bindings and the EndPoints defined in the spec.
    properties:
      title:
        description: A short, plain-text label for the API. Its value is a string.
      version?:
        type: string
        description: String identifying the version of the API.
      connection?:
        description: Optional connection details to the system providing the messaging infrastructure.
        type: Connection #| Connection[]
      transport:
        description: String containing an identifier for the kind of transport associated to the API, bindings in the spec will target this transport value
        type: string
      endpoints?:
        description: EndPoints declared in the API
        properties:
          //.*/: Endpoint
  Connection:
    type: [lc.DomainElement,HasBindings]
    description: |
      The `Connection` node contains global connection information that can be used by clients to gain access to the API endpoints and use the async operations interface.
      It can be used to define a base identifier for the end points as well as to set-up specific `Bindings` for the transport layer.
      This node can also be used to define connection parameters to a 'messaging broker' in the messaging systems that using this kind of functionality.
    properties:
      host:
        displayName: host
        description: Host machine where to establish the connection
        type: string
      port:
        displayName: port
        description: Network port for the connection in the host machine
        type: integer
      scheme:
        displayName: scheme
        description: URI scheme identifying the network protocol used for the connection
        type: string
  Endpoint:
    type: [lc.DomainElement,HasBindings,HasDescription, HasPattern]
    displayName: End Point
    description: |
      Each of the discoverable communication units in the API with support for the asynchronous interface are defined as EndPoint nodes.
      EndPoints are defined by an identifier, the list of asynchronous operations supported and an optional set of transport bindings.
    properties:
      //:
        displayName: operation
        description: Operation supported by an EndPoint
        type: AsyncOperation
      parameters:
        displayName: parameter
        description: Parameters that can be replaced in the identifier of an EndPoint
        type: Parameter[]
  AsyncOperation:
    type: [lc.DomainElement, HasDescription, HasName, HasBindings, HasPattern,HasSerialization]
    properties:
      message?:
        displayName: message
        description: Message used as argument for an asynchronous operation
        type: Message
  Parameter:
    type: [lc.DomainElement, HasSchema, HasName]
    description: Information about the replacement options that can be used in a parametric EndPoint
  Message:
    description: Unit of data passed as the argument of an asyn operation
    type: [lc.DomainElement, HasSchema]
    properties:
      headers:
        displayName: header
        description: Meta-data about a message
        type: Header[]
  Header:
    type: [HasName, HasSchema]
    description: Meta information for a message
    properties:
      mandatory?: boolean
  Bindings:
    properties:
      //: string
